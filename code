!pip install tensorflow==2.17.0 --upgrade
!pip install ml-dtypes --upgrade
!pip check

! pip install pandas
! pip install numpy
! pip install matplotlib
! pip install scikit-learn
! pip install tensorboard
! pip install streamlit
!pip install scikeras
! pip install nltk
## Data Collection
import nltk
nltk.download('gutenberg')
from nltk.corpus import gutenberg
import  pandas as pd

## load the dataset
data=gutenberg.raw('shakespeare-hamlet.txt')
## save to a file
with open('hamlet.txt','w') as file:
    file.write(data)
## Data Collection
import nltk
nltk.download('gutenberg')
from nltk.corpus import gutenberg
import  pandas as pd

## load the dataset
data=gutenberg.raw('shakespeare-hamlet.txt')
## save to a file
with open('hamlet.txt','w') as file:
    file.write(data)
      tokenizer.word_index
  ## create inoput sequences
input_sequences=[]
for line in text.split('\n'):
    token_list=tokenizer.texts_to_sequences([line])[0]
    for i in range(1,len(token_list)):
        n_gram_sequence=token_list[:i+1]
        input_sequences.append(n_gram_sequence)
  input_sequences
## Pad Sequences
max_sequence_len=max([len(x) for x in input_sequences])
max_sequence_len
##create predicitors and label
import tensorflow as tf
x,y=input_sequences[:,:-1],input_sequences[:,-1]
  y
y=tf.keras.utils.to_categorical(y,num_classes=total_words)
y
# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
# Define early stopping
from tensorflow.keras.callbacks import EarlyStopping
early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)
  ## Train our LSTM RNN
## Train our LSTM RNN

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding,LSTM,Dense,Dropout,GRU

## Define the model
model=Sequential()
# Set input_length to max_sequence_len-1 as used in the Embedding layer
input_length = max_sequence_len-1
model.add(Embedding(total_words, 100,input_length=input_length))
model.add(LSTM(150,return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(100))
model.add(Dense(total_words,activation="softmax"))
model.build(input_shape=(None, input_length))

# #Compile the model
model.compile(loss="categorical_crossentropy",optimizer='adam',metrics=['accuracy'])
model.summary()
  ## Train the model
history=model.fit(x_train,y_train,epochs=50,validation_data=(x_test,y_test),verbose=1,callbacks=[early_stopping])
  # Function to predict the next word
def predict_next_word(model, tokenizer, text, max_sequence_len):
    token_list = tokenizer.texts_to_sequences([text])[0]
    if len(token_list) >= max_sequence_len:
        token_list = token_list[-(max_sequence_len-1):]  # Ensure the sequence length matches max_sequence_len-1
    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
    predicted = model.predict(token_list, verbose=0)
    predicted_word_index = np.argmax(predicted, axis=1)
    for word, index in tokenizer.word_index.items():
        if index == predicted_word_index:
            return word
    return None
  input_text="To be or not to be"
print(f"Input text:{input_text}")
max_sequence_len=model.input_shape[1]+1
next_word=predict_next_word(model,tokenizer,input_text,max_sequence_len)
print(f"Next Word PRediction:{next_word}")
  ## Save the model
model.save("next_word_lstm.h5")
## Save the tokenizer
import pickle
with open('tokenizer.pickle','wb') as handle:
    pickle.dump(tokenizer,handle,protocol=pickle.HIGHEST_PROTOCOL)
      input_text="  Barn. Last night of all,When yond same"
print(f"Input text:{input_text}")
max_sequence_len=model.input_shape[1]+1
next_word=predict_next_word(model,tokenizer,input_text,max_sequence_len)
print(f"Next Word PRediction:{next_word}")
  ### Deployment in Google colab
  ##
  ##
  ##
  import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pickle
from tensorflow.keras.models import load_model

# Load the model
model = load_model('next_word_lstm.h5')
  # Load the Tokenizer
with open('tokenizer.pickle','rb') as handle:
  tokenizer=pickle.load(handle)
    # Function to predict the next word
def predict_next_word(model, tokenizer, text, max_sequence_len):
    token_list = tokenizer.texts_to_sequences([text])[0]
    if len(token_list) >= max_sequence_len:
        token_list = token_list[-(max_sequence_len-1):]  # Ensure the sequence length matches max_sequence_len-1
    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
    predicted = model.predict(token_list, verbose=0)
    predicted_word_index = np.argmax(predicted, axis=1)
    for word, index in tokenizer.word_index.items():
        if index == predicted_word_index:
            return word
    return None
  from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pickle

# Recreate the model
def create_model(total_words, max_sequence_len):
    model = Sequential()
    model.add(Embedding(input_dim=total_words, output_dim=100, input_length=max_sequence_len-1))
    model.add(LSTM(150, return_sequences=True))
    model.add(Dropout(0.2))
    model.add(LSTM(100))
    model.add(Dense(total_words, activation="softmax"))
    model.compile(loss="categorical_crossentropy", optimizer='adam', metrics=['accuracy'])
    return model

# Save the model
def save_model(model, filename='next_word_lstm.h5'):
    model.save(filename)

# Example usage
total_words = 5000  # Adjust based on your tokenizer
max_sequence_len = 30  # Adjust based on your input sequences

model = create_model(total_words, max_sequence_len)
save_model(model)

# Load and test the model
try:
    model = load_model('next_word_lstm.h5')
    print("Model loaded successfully")
except Exception as e:
    print(f"Error loading model: {e}")
!pip install streamlit
%%writefile app.py
  !wget -qO- ipv4.icanhazip.com
!npm install -g localtunnel@2.0.2
  %%writefile app.py
import streamlit as st
from tensorflow.keras.models import load_model
import pickle
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load the pre-trained model
model = load_model('next_word_lstm.h5')

# Load the tokenizer
with open('tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

# Define the predict_next_word function
def predict_next_word(model, tokenizer, input_text, max_sequence_len):
    # Tokenize the input text
    token_list = tokenizer.texts_to_sequences([input_text])[0]

    # Pad the sequence
    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')

    # Predict the next word
    predicted = model.predict(token_list, verbose=0)
    predicted_word_index = predicted.argmax(axis=-1)[0]

    # Return the predicted word from tokenizer's index
    for word, index in tokenizer.word_index.items():
        if index == predicted_word_index:
            return word
    return "Word not found"

# Streamlit app title
st.title("Next Word Prediction With LSTM and Early Stopping")

# Input text from user
input_text = st.text_input("Enter the sequence of words", "To be or not to")

# Predict next word when button is clicked
if st.button("Predict Next Word"):
    max_sequence_len = model.input_shape[1] + 1
    next_word = predict_next_word(model, tokenizer, input_text, max_sequence_len)
    st.write(f'Next word: {next_word}')
  !streamlit run app.py & npx localtunnel --port 8501

  




  
  
